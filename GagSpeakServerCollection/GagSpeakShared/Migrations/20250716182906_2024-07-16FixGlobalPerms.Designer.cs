// <auto-generated />
using System;
using GagspeakShared.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GagSpeakShared.Migrations
{
    [DbContext(typeof(GagspeakDbContext))]
    [Migration("20250716182906_2024-07-16FixGlobalPerms")]
    partial class _20240716FixGlobalPerms
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GagspeakShared.Models.AccountClaimAuth", b =>
                {
                    b.Property<decimal>("DiscordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("discord_id");

                    b.Property<string>("InitialGeneratedKey")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("initial_generated_key");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<string>("UserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<string>("VerificationCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("verification_code");

                    b.HasKey("DiscordId")
                        .HasName("pk_account_claim_auth");

                    b.HasIndex("UserUID")
                        .HasDatabaseName("ix_account_claim_auth_user_uid");

                    b.ToTable("account_claim_auth", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.Auth", b =>
                {
                    b.Property<string>("HashedKey")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("hashed_key");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("boolean")
                        .HasColumnName("is_banned");

                    b.Property<string>("PrimaryUserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("primary_user_uid");

                    b.Property<string>("UserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.HasKey("HashedKey")
                        .HasName("pk_auth");

                    b.HasIndex("PrimaryUserUID")
                        .HasDatabaseName("ix_auth_primary_user_uid");

                    b.HasIndex("UserUID")
                        .HasDatabaseName("ix_auth_user_uid");

                    b.ToTable("auth", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.Banned", b =>
                {
                    b.Property<string>("CharacterIdentification")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("character_identification");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<string>("UserUID")
                        .HasColumnType("text")
                        .HasColumnName("user_uid");

                    b.HasKey("CharacterIdentification")
                        .HasName("pk_banned_users");

                    b.ToTable("banned_users", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.BannedRegistrations", b =>
                {
                    b.Property<string>("DiscordId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("discord_id");

                    b.HasKey("DiscordId")
                        .HasName("pk_banned_registrations");

                    b.ToTable("banned_registrations", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.ClientPair", b =>
                {
                    b.Property<string>("UserUID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<string>("OtherUserUID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("other_user_uid");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("timestamp");

                    b.HasKey("UserUID", "OtherUserUID")
                        .HasName("pk_client_pairs");

                    b.HasIndex("OtherUserUID")
                        .HasDatabaseName("ix_client_pairs_other_user_uid");

                    b.HasIndex("UserUID")
                        .HasDatabaseName("ix_client_pairs_user_uid");

                    b.ToTable("client_pairs", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.ClientPairPermissionAccess", b =>
                {
                    b.Property<string>("UserUID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<string>("OtherUserUID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("other_user_uid");

                    b.Property<bool>("ApplyGagsAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("apply_gags_allowed");

                    b.Property<bool>("ApplyLayersAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("apply_layers_allowed");

                    b.Property<bool>("ApplyLayersWhileLockedAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("apply_layers_while_locked_allowed");

                    b.Property<bool>("ApplyRestraintSetsAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("apply_restraint_sets_allowed");

                    b.Property<bool>("ApplyRestrictionsAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("apply_restrictions_allowed");

                    b.Property<bool>("ChatGarblerActiveAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("chat_garbler_active_allowed");

                    b.Property<bool>("ChatGarblerLockedAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("chat_garbler_locked_allowed");

                    b.Property<bool>("DevotionalLocksAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("devotional_locks_allowed");

                    b.Property<bool>("ExecutePatternsAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("execute_patterns_allowed");

                    b.Property<bool>("GagVisualsAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("gag_visuals_allowed");

                    b.Property<bool>("HypnoEffectSendingAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("hypno_effect_sending_allowed");

                    b.Property<bool>("LockGagsAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("lock_gags_allowed");

                    b.Property<bool>("LockRestraintSetsAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("lock_restraint_sets_allowed");

                    b.Property<bool>("LockRestrictionsAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("lock_restrictions_allowed");

                    b.Property<bool>("LockToyboxUIAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("lock_toybox_ui_allowed");

                    b.Property<bool>("MaxGagTimeAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("max_gag_time_allowed");

                    b.Property<bool>("MaxMoodleTimeAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("max_moodle_time_allowed");

                    b.Property<bool>("MaxRestraintTimeAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("max_restraint_time_allowed");

                    b.Property<bool>("MaxRestrictionTimeAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("max_restriction_time_allowed");

                    b.Property<byte>("MoodlePermsAllowed")
                        .HasColumnType("smallint")
                        .HasColumnName("moodle_perms_allowed");

                    b.Property<bool>("MoodlesEnabledAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("moodles_enabled_allowed");

                    b.Property<bool>("OwnerLocksAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("owner_locks_allowed");

                    b.Property<bool>("PermanentLocksAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("permanent_locks_allowed");

                    b.Property<byte>("PuppetPermsAllowed")
                        .HasColumnType("smallint")
                        .HasColumnName("puppet_perms_allowed");

                    b.Property<bool>("PuppeteerEnabledAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("puppeteer_enabled_allowed");

                    b.Property<bool>("RemoteControlAccessAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("remote_control_access_allowed");

                    b.Property<bool>("RemoveGagsAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("remove_gags_allowed");

                    b.Property<bool>("RemoveLayersAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("remove_layers_allowed");

                    b.Property<bool>("RemoveLayersWhileLockedAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("remove_layers_while_locked_allowed");

                    b.Property<bool>("RemoveRestraintSetsAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("remove_restraint_sets_allowed");

                    b.Property<bool>("RemoveRestrictionsAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("remove_restrictions_allowed");

                    b.Property<bool>("RestraintSetVisualsAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("restraint_set_visuals_allowed");

                    b.Property<bool>("RestrictionVisualsAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("restriction_visuals_allowed");

                    b.Property<bool>("SpatialAudioAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("spatial_audio_allowed");

                    b.Property<bool>("StopPatternsAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("stop_patterns_allowed");

                    b.Property<bool>("ToggleAlarmsAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("toggle_alarms_allowed");

                    b.Property<bool>("ToggleToyStateAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("toggle_toy_state_allowed");

                    b.Property<bool>("ToggleTriggersAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("toggle_triggers_allowed");

                    b.Property<bool>("ToyboxEnabledAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("toybox_enabled_allowed");

                    b.Property<bool>("UnlockGagsAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("unlock_gags_allowed");

                    b.Property<bool>("UnlockRestraintSetsAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("unlock_restraint_sets_allowed");

                    b.Property<bool>("UnlockRestrictionsAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("unlock_restrictions_allowed");

                    b.Property<bool>("WardrobeEnabledAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("wardrobe_enabled_allowed");

                    b.HasKey("UserUID", "OtherUserUID")
                        .HasName("pk_client_pair_permissions_access");

                    b.HasIndex("OtherUserUID")
                        .HasDatabaseName("ix_client_pair_permissions_access_other_user_uid");

                    b.HasIndex("UserUID")
                        .HasDatabaseName("ix_client_pair_permissions_access_user_uid");

                    b.ToTable("client_pair_permissions_access", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.ClientPairPermissions", b =>
                {
                    b.Property<string>("UserUID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<string>("OtherUserUID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("other_user_uid");

                    b.Property<bool>("AllowBeeps")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_beeps");

                    b.Property<bool>("AllowChatInputBlocking")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_chat_input_blocking");

                    b.Property<bool>("AllowForcedEmote")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_forced_emote");

                    b.Property<bool>("AllowForcedFollow")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_forced_follow");

                    b.Property<bool>("AllowForcedSit")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_forced_sit");

                    b.Property<bool>("AllowForcedStay")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_forced_stay");

                    b.Property<bool>("AllowGarbleChannelEditing")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_garble_channel_editing");

                    b.Property<bool>("AllowHidingChatBoxes")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_hiding_chat_boxes");

                    b.Property<bool>("AllowHidingChatInput")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_hiding_chat_input");

                    b.Property<bool>("AllowHypnoImageSending")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_hypno_image_sending");

                    b.Property<bool>("AllowShocks")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_shocks");

                    b.Property<bool>("AllowVibrations")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_vibrations");

                    b.Property<bool>("ApplyGags")
                        .HasColumnType("boolean")
                        .HasColumnName("apply_gags");

                    b.Property<bool>("ApplyLayers")
                        .HasColumnType("boolean")
                        .HasColumnName("apply_layers");

                    b.Property<bool>("ApplyLayersWhileLocked")
                        .HasColumnType("boolean")
                        .HasColumnName("apply_layers_while_locked");

                    b.Property<bool>("ApplyRestraintSets")
                        .HasColumnType("boolean")
                        .HasColumnName("apply_restraint_sets");

                    b.Property<bool>("ApplyRestrictions")
                        .HasColumnType("boolean")
                        .HasColumnName("apply_restrictions");

                    b.Property<bool>("DevotionalLocks")
                        .HasColumnType("boolean")
                        .HasColumnName("devotional_locks");

                    b.Property<char>("EndChar")
                        .HasColumnType("character(1)")
                        .HasColumnName("end_char");

                    b.Property<bool>("ExecutePatterns")
                        .HasColumnType("boolean")
                        .HasColumnName("execute_patterns");

                    b.Property<bool>("HypnoEffectSending")
                        .HasColumnType("boolean")
                        .HasColumnName("hypno_effect_sending");

                    b.Property<bool>("InHardcore")
                        .HasColumnType("boolean")
                        .HasColumnName("in_hardcore");

                    b.Property<bool>("IsPaused")
                        .HasColumnType("boolean")
                        .HasColumnName("is_paused");

                    b.Property<bool>("LockGags")
                        .HasColumnType("boolean")
                        .HasColumnName("lock_gags");

                    b.Property<bool>("LockRestraintSets")
                        .HasColumnType("boolean")
                        .HasColumnName("lock_restraint_sets");

                    b.Property<bool>("LockRestrictions")
                        .HasColumnType("boolean")
                        .HasColumnName("lock_restrictions");

                    b.Property<int>("MaxDuration")
                        .HasColumnType("integer")
                        .HasColumnName("max_duration");

                    b.Property<TimeSpan>("MaxGagTime")
                        .HasColumnType("interval")
                        .HasColumnName("max_gag_time");

                    b.Property<int>("MaxIntensity")
                        .HasColumnType("integer")
                        .HasColumnName("max_intensity");

                    b.Property<TimeSpan>("MaxMoodleTime")
                        .HasColumnType("interval")
                        .HasColumnName("max_moodle_time");

                    b.Property<TimeSpan>("MaxRestraintTime")
                        .HasColumnType("interval")
                        .HasColumnName("max_restraint_time");

                    b.Property<TimeSpan>("MaxRestrictionTime")
                        .HasColumnType("interval")
                        .HasColumnName("max_restriction_time");

                    b.Property<TimeSpan>("MaxVibrateDuration")
                        .HasColumnType("interval")
                        .HasColumnName("max_vibrate_duration");

                    b.Property<byte>("MoodlePerms")
                        .HasColumnType("smallint")
                        .HasColumnName("moodle_perms");

                    b.Property<bool>("OwnerLocks")
                        .HasColumnType("boolean")
                        .HasColumnName("owner_locks");

                    b.Property<bool>("PairLockedStates")
                        .HasColumnType("boolean")
                        .HasColumnName("pair_locked_states");

                    b.Property<bool>("PermanentLocks")
                        .HasColumnType("boolean")
                        .HasColumnName("permanent_locks");

                    b.Property<string>("PiShockShareCode")
                        .HasColumnType("text")
                        .HasColumnName("pi_shock_share_code");

                    b.Property<byte>("PuppetPerms")
                        .HasColumnType("smallint")
                        .HasColumnName("puppet_perms");

                    b.Property<bool>("RemoteControlAccess")
                        .HasColumnType("boolean")
                        .HasColumnName("remote_control_access");

                    b.Property<bool>("RemoveGags")
                        .HasColumnType("boolean")
                        .HasColumnName("remove_gags");

                    b.Property<bool>("RemoveLayers")
                        .HasColumnType("boolean")
                        .HasColumnName("remove_layers");

                    b.Property<bool>("RemoveLayersWhileLocked")
                        .HasColumnType("boolean")
                        .HasColumnName("remove_layers_while_locked");

                    b.Property<bool>("RemoveRestraintSets")
                        .HasColumnType("boolean")
                        .HasColumnName("remove_restraint_sets");

                    b.Property<bool>("RemoveRestrictions")
                        .HasColumnType("boolean")
                        .HasColumnName("remove_restrictions");

                    b.Property<char>("StartChar")
                        .HasColumnType("character(1)")
                        .HasColumnName("start_char");

                    b.Property<bool>("StopPatterns")
                        .HasColumnType("boolean")
                        .HasColumnName("stop_patterns");

                    b.Property<bool>("ToggleAlarms")
                        .HasColumnType("boolean")
                        .HasColumnName("toggle_alarms");

                    b.Property<bool>("ToggleToyState")
                        .HasColumnType("boolean")
                        .HasColumnName("toggle_toy_state");

                    b.Property<bool>("ToggleTriggers")
                        .HasColumnType("boolean")
                        .HasColumnName("toggle_triggers");

                    b.Property<string>("TriggerPhrase")
                        .HasColumnType("text")
                        .HasColumnName("trigger_phrase");

                    b.Property<bool>("UnlockGags")
                        .HasColumnType("boolean")
                        .HasColumnName("unlock_gags");

                    b.Property<bool>("UnlockRestraintSets")
                        .HasColumnType("boolean")
                        .HasColumnName("unlock_restraint_sets");

                    b.Property<bool>("UnlockRestrictions")
                        .HasColumnType("boolean")
                        .HasColumnName("unlock_restrictions");

                    b.HasKey("UserUID", "OtherUserUID")
                        .HasName("pk_client_pair_permissions");

                    b.HasIndex("OtherUserUID")
                        .HasDatabaseName("ix_client_pair_permissions_other_user_uid");

                    b.HasIndex("UserUID")
                        .HasDatabaseName("ix_client_pair_permissions_user_uid");

                    b.ToTable("client_pair_permissions", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.Keyword", b =>
                {
                    b.Property<string>("Word")
                        .HasColumnType("text")
                        .HasColumnName("word");

                    b.HasKey("Word")
                        .HasName("pk_keywords");

                    b.HasIndex("Word")
                        .IsUnique()
                        .HasDatabaseName("ix_keywords_word");

                    b.ToTable("keywords", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.KinksterRequest", b =>
                {
                    b.Property<string>("UserUID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<string>("OtherUserUID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("other_user_uid");

                    b.Property<string>("AttachedMessage")
                        .HasColumnType("text")
                        .HasColumnName("attached_message");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time");

                    b.HasKey("UserUID", "OtherUserUID")
                        .HasName("pk_kinkster_pair_requests");

                    b.HasIndex("OtherUserUID")
                        .HasDatabaseName("ix_kinkster_pair_requests_other_user_uid");

                    b.HasIndex("UserUID")
                        .HasDatabaseName("ix_kinkster_pair_requests_user_uid");

                    b.ToTable("kinkster_pair_requests", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.LikesMoodles", b =>
                {
                    b.Property<string>("UserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<Guid>("MoodleStatusId")
                        .HasColumnType("uuid")
                        .HasColumnName("moodle_status_id");

                    b.HasKey("UserUID", "MoodleStatusId")
                        .HasName("pk_likes_moodles");

                    b.HasIndex("MoodleStatusId")
                        .HasDatabaseName("ix_likes_moodles_moodle_status_id");

                    b.ToTable("likes_moodles", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.LikesPatterns", b =>
                {
                    b.Property<string>("UserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<Guid>("PatternEntryId")
                        .HasColumnType("uuid")
                        .HasColumnName("pattern_entry_id");

                    b.HasKey("UserUID", "PatternEntryId")
                        .HasName("pk_likes_patterns");

                    b.HasIndex("PatternEntryId")
                        .HasDatabaseName("ix_likes_patterns_pattern_entry_id");

                    b.ToTable("likes_patterns", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.MoodleKeyword", b =>
                {
                    b.Property<Guid>("MoodleStatusId")
                        .HasColumnType("uuid")
                        .HasColumnName("moodle_status_id");

                    b.Property<string>("KeywordWord")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("keyword_word");

                    b.HasKey("MoodleStatusId", "KeywordWord")
                        .HasName("pk_moodle_keywords");

                    b.HasIndex("KeywordWord")
                        .HasDatabaseName("ix_moodle_keywords_keyword_word");

                    b.HasIndex("MoodleStatusId")
                        .HasDatabaseName("ix_moodle_keywords_moodle_status_id");

                    b.ToTable("moodle_keywords", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.MoodleStatus", b =>
                {
                    b.Property<Guid>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("identifier");

                    b.Property<bool>("AsPermanent")
                        .HasColumnType("boolean")
                        .HasColumnName("as_permanent");

                    b.Property<string>("Author")
                        .HasColumnType("text")
                        .HasColumnName("author");

                    b.Property<string>("CustomVFXPath")
                        .HasColumnType("text")
                        .HasColumnName("custom_vfx_path");

                    b.Property<int>("Days")
                        .HasColumnType("integer")
                        .HasColumnName("days");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("Dispelable")
                        .HasColumnType("boolean")
                        .HasColumnName("dispelable");

                    b.Property<int>("Hours")
                        .HasColumnType("integer")
                        .HasColumnName("hours");

                    b.Property<int>("IconID")
                        .HasColumnType("integer")
                        .HasColumnName("icon_id");

                    b.Property<int>("Minutes")
                        .HasColumnType("integer")
                        .HasColumnName("minutes");

                    b.Property<bool>("NoExpire")
                        .HasColumnType("boolean")
                        .HasColumnName("no_expire");

                    b.Property<bool>("Persistent")
                        .HasColumnType("boolean")
                        .HasColumnName("persistent");

                    b.Property<string>("PublisherUID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("publisher_uid");

                    b.Property<int>("Seconds")
                        .HasColumnType("integer")
                        .HasColumnName("seconds");

                    b.Property<bool>("StackOnReapply")
                        .HasColumnType("boolean")
                        .HasColumnName("stack_on_reapply");

                    b.Property<int>("Stacks")
                        .HasColumnType("integer")
                        .HasColumnName("stacks");

                    b.Property<int>("StacksIncOnReapply")
                        .HasColumnType("integer")
                        .HasColumnName("stacks_inc_on_reapply");

                    b.Property<Guid>("StatusOnDispell")
                        .HasColumnType("uuid")
                        .HasColumnName("status_on_dispell");

                    b.Property<DateTime>("TimePublished")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_published");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Identifier")
                        .HasName("pk_moodle_status");

                    b.HasIndex("Author")
                        .HasDatabaseName("ix_moodle_status_author");

                    b.HasIndex("Title")
                        .HasDatabaseName("ix_moodle_status_title");

                    b.ToTable("moodle_status", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.PatternEntry", b =>
                {
                    b.Property<Guid>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("identifier");

                    b.Property<string>("Author")
                        .HasColumnType("text")
                        .HasColumnName("author");

                    b.Property<string>("Base64PatternData")
                        .HasColumnType("text")
                        .HasColumnName("base64pattern_data");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<int>("DownloadCount")
                        .HasColumnType("integer")
                        .HasColumnName("download_count");

                    b.Property<TimeSpan>("Length")
                        .HasColumnType("interval")
                        .HasColumnName("length");

                    b.Property<int>("MotorsUsed")
                        .HasColumnType("integer")
                        .HasColumnName("motors_used");

                    b.Property<string>("Name")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("name");

                    b.Property<int>("PrimaryDeviceUsed")
                        .HasColumnType("integer")
                        .HasColumnName("primary_device_used");

                    b.Property<string>("PublisherUID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("publisher_uid");

                    b.Property<int>("SecondaryDeviceUsed")
                        .HasColumnType("integer")
                        .HasColumnName("secondary_device_used");

                    b.Property<bool>("ShouldLoop")
                        .HasColumnType("boolean")
                        .HasColumnName("should_loop");

                    b.Property<DateTime>("TimePublished")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_published");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Identifier")
                        .HasName("pk_pattern_entry");

                    b.HasIndex("Author")
                        .HasDatabaseName("ix_pattern_entry_author");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_pattern_entry_name");

                    b.ToTable("pattern_entry", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.PatternKeyword", b =>
                {
                    b.Property<Guid>("PatternEntryId")
                        .HasColumnType("uuid")
                        .HasColumnName("pattern_entry_id");

                    b.Property<string>("KeywordWord")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("keyword_word");

                    b.HasKey("PatternEntryId", "KeywordWord")
                        .HasName("pk_pattern_keywords");

                    b.HasIndex("KeywordWord")
                        .HasDatabaseName("ix_pattern_keywords_keyword_word");

                    b.HasIndex("PatternEntryId")
                        .HasDatabaseName("ix_pattern_keywords_pattern_entry_id");

                    b.ToTable("pattern_keywords", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.User", b =>
                {
                    b.Property<string>("UID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("uid");

                    b.Property<string>("Alias")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("alias");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("FirstUploadTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("first_upload_timestamp");

                    b.Property<DateTime>("LastLoggedIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_logged_in");

                    b.Property<bool>("ProfileReportingTimedOut")
                        .HasColumnType("boolean")
                        .HasColumnName("profile_reporting_timed_out");

                    b.Property<int>("UploadLimitCounter")
                        .HasColumnType("integer")
                        .HasColumnName("upload_limit_counter");

                    b.Property<int>("VanityTier")
                        .HasColumnType("integer")
                        .HasColumnName("vanity_tier");

                    b.HasKey("UID")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.UserAchievementData", b =>
                {
                    b.Property<string>("UserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<string>("Base64AchievementData")
                        .HasColumnType("text")
                        .HasColumnName("base64achievement_data");

                    b.HasKey("UserUID")
                        .HasName("pk_user_achievement_data");

                    b.HasIndex("UserUID")
                        .HasDatabaseName("ix_user_achievement_data_user_uid");

                    b.ToTable("user_achievement_data", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.UserGagData", b =>
                {
                    b.Property<string>("UserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid")
                        .HasColumnOrder(0);

                    b.Property<byte>("Layer")
                        .HasColumnType("smallint")
                        .HasColumnName("layer")
                        .HasColumnOrder(1);

                    b.Property<string>("Enabler")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("enabler");

                    b.Property<int>("Gag")
                        .HasColumnType("integer")
                        .HasColumnName("gag");

                    b.Property<int>("Padlock")
                        .HasColumnType("integer")
                        .HasColumnName("padlock");

                    b.Property<string>("PadlockAssigner")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("padlock_assigner");

                    b.Property<string>("Password")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("password");

                    b.Property<DateTimeOffset>("Timer")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timer");

                    b.HasKey("UserUID", "Layer")
                        .HasName("pk_user_gag_data");

                    b.HasIndex("UserUID", "Layer")
                        .IsUnique()
                        .HasDatabaseName("ix_user_gag_data_user_uid_layer");

                    b.ToTable("user_gag_data", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.UserGlobalPermissions", b =>
                {
                    b.Property<string>("UserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<bool>("AllowBeeps")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_beeps");

                    b.Property<bool>("AllowShocks")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_shocks");

                    b.Property<bool>("AllowVibrations")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_vibrations");

                    b.Property<long>("AllowedGarblerChannels")
                        .HasColumnType("bigint")
                        .HasColumnName("allowed_garbler_channels");

                    b.Property<string>("ChatBoxesHidden")
                        .HasColumnType("text")
                        .HasColumnName("chat_boxes_hidden");

                    b.Property<bool>("ChatGarblerActive")
                        .HasColumnType("boolean")
                        .HasColumnName("chat_garbler_active");

                    b.Property<bool>("ChatGarblerLocked")
                        .HasColumnType("boolean")
                        .HasColumnName("chat_garbler_locked");

                    b.Property<string>("ChatInputBlocked")
                        .HasColumnType("text")
                        .HasColumnName("chat_input_blocked");

                    b.Property<string>("ChatInputHidden")
                        .HasColumnType("text")
                        .HasColumnName("chat_input_hidden");

                    b.Property<string>("ForcedEmoteState")
                        .HasColumnType("text")
                        .HasColumnName("forced_emote_state");

                    b.Property<string>("ForcedFollow")
                        .HasColumnType("text")
                        .HasColumnName("forced_follow");

                    b.Property<string>("ForcedStay")
                        .HasColumnType("text")
                        .HasColumnName("forced_stay");

                    b.Property<bool>("GagVisuals")
                        .HasColumnType("boolean")
                        .HasColumnName("gag_visuals");

                    b.Property<bool>("GaggedNameplate")
                        .HasColumnType("boolean")
                        .HasColumnName("gagged_nameplate");

                    b.Property<string>("GlobalShockShareCode")
                        .HasColumnType("text")
                        .HasColumnName("global_shock_share_code");

                    b.Property<string>("HypnosisCustomEffect")
                        .HasColumnType("text")
                        .HasColumnName("hypnosis_custom_effect");

                    b.Property<bool>("InVibeRoom")
                        .HasColumnType("boolean")
                        .HasColumnName("in_vibe_room");

                    b.Property<int>("MaxDuration")
                        .HasColumnType("integer")
                        .HasColumnName("max_duration");

                    b.Property<int>("MaxIntensity")
                        .HasColumnType("integer")
                        .HasColumnName("max_intensity");

                    b.Property<byte>("PuppetPerms")
                        .HasColumnType("smallint")
                        .HasColumnName("puppet_perms");

                    b.Property<bool>("PuppeteerEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("puppeteer_enabled");

                    b.Property<bool>("RestraintSetVisuals")
                        .HasColumnType("boolean")
                        .HasColumnName("restraint_set_visuals");

                    b.Property<bool>("RestrictionVisuals")
                        .HasColumnType("boolean")
                        .HasColumnName("restriction_visuals");

                    b.Property<TimeSpan>("ShockVibrateDuration")
                        .HasColumnType("interval")
                        .HasColumnName("shock_vibrate_duration");

                    b.Property<bool>("SpatialAudio")
                        .HasColumnType("boolean")
                        .HasColumnName("spatial_audio");

                    b.Property<bool>("ToyboxEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("toybox_enabled");

                    b.Property<bool>("ToysAreInteractable")
                        .HasColumnType("boolean")
                        .HasColumnName("toys_are_interactable");

                    b.Property<string>("TriggerPhrase")
                        .HasColumnType("text")
                        .HasColumnName("trigger_phrase");

                    b.Property<bool>("WardrobeEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("wardrobe_enabled");

                    b.HasKey("UserUID")
                        .HasName("pk_user_global_permissions");

                    b.ToTable("user_global_permissions", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.UserProfileData", b =>
                {
                    b.Property<string>("UserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<string>("Base64ProfilePic")
                        .HasColumnType("text")
                        .HasColumnName("base64profile_pic");

                    b.Property<int>("BlockedSlotBorder")
                        .HasColumnType("integer")
                        .HasColumnName("blocked_slot_border");

                    b.Property<int>("BlockedSlotOverlay")
                        .HasColumnType("integer")
                        .HasColumnName("blocked_slot_overlay");

                    b.Property<int>("BlockedSlotsBackground")
                        .HasColumnType("integer")
                        .HasColumnName("blocked_slots_background");

                    b.Property<int>("BlockedSlotsBorder")
                        .HasColumnType("integer")
                        .HasColumnName("blocked_slots_border");

                    b.Property<int>("BlockedSlotsOverlay")
                        .HasColumnType("integer")
                        .HasColumnName("blocked_slots_overlay");

                    b.Property<int>("ChosenTitleId")
                        .HasColumnType("integer")
                        .HasColumnName("chosen_title_id");

                    b.Property<int>("CompletedAchievementsTotal")
                        .HasColumnType("integer")
                        .HasColumnName("completed_achievements_total");

                    b.Property<int>("DescriptionBackground")
                        .HasColumnType("integer")
                        .HasColumnName("description_background");

                    b.Property<int>("DescriptionBorder")
                        .HasColumnType("integer")
                        .HasColumnName("description_border");

                    b.Property<int>("DescriptionOverlay")
                        .HasColumnType("integer")
                        .HasColumnName("description_overlay");

                    b.Property<bool>("FlaggedForReport")
                        .HasColumnType("boolean")
                        .HasColumnName("flagged_for_report");

                    b.Property<int>("GagSlotBackground")
                        .HasColumnType("integer")
                        .HasColumnName("gag_slot_background");

                    b.Property<int>("GagSlotBorder")
                        .HasColumnType("integer")
                        .HasColumnName("gag_slot_border");

                    b.Property<int>("GagSlotOverlay")
                        .HasColumnType("integer")
                        .HasColumnName("gag_slot_overlay");

                    b.Property<int>("PadlockBackground")
                        .HasColumnType("integer")
                        .HasColumnName("padlock_background");

                    b.Property<int>("PadlockBorder")
                        .HasColumnType("integer")
                        .HasColumnName("padlock_border");

                    b.Property<int>("PadlockOverlay")
                        .HasColumnType("integer")
                        .HasColumnName("padlock_overlay");

                    b.Property<int>("PlateBackground")
                        .HasColumnType("integer")
                        .HasColumnName("plate_background");

                    b.Property<int>("PlateBorder")
                        .HasColumnType("integer")
                        .HasColumnName("plate_border");

                    b.Property<bool>("ProfileDisabled")
                        .HasColumnType("boolean")
                        .HasColumnName("profile_disabled");

                    b.Property<bool>("ProfileIsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("profile_is_public");

                    b.Property<int>("ProfilePictureBorder")
                        .HasColumnType("integer")
                        .HasColumnName("profile_picture_border");

                    b.Property<int>("ProfilePictureOverlay")
                        .HasColumnType("integer")
                        .HasColumnName("profile_picture_overlay");

                    b.Property<string>("UserDescription")
                        .HasColumnType("text")
                        .HasColumnName("user_description");

                    b.Property<int>("WarningStrikeCount")
                        .HasColumnType("integer")
                        .HasColumnName("warning_strike_count");

                    b.HasKey("UserUID")
                        .HasName("pk_user_profile_data");

                    b.HasIndex("UserUID")
                        .HasDatabaseName("ix_user_profile_data_user_uid");

                    b.ToTable("user_profile_data", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.UserProfileDataReport", b =>
                {
                    b.Property<int>("ReportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("report_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReportID"));

                    b.Property<string>("ReportReason")
                        .HasColumnType("text")
                        .HasColumnName("report_reason");

                    b.Property<DateTime>("ReportTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("report_time");

                    b.Property<string>("ReportedBase64Picture")
                        .HasColumnType("text")
                        .HasColumnName("reported_base64picture");

                    b.Property<string>("ReportedDescription")
                        .HasColumnType("text")
                        .HasColumnName("reported_description");

                    b.Property<string>("ReportedUserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("reported_user_uid");

                    b.Property<string>("ReportingUserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("reporting_user_uid");

                    b.HasKey("ReportID")
                        .HasName("pk_user_profile_data_reports");

                    b.HasIndex("ReportedUserUID")
                        .HasDatabaseName("ix_user_profile_data_reports_reported_user_uid");

                    b.HasIndex("ReportingUserUID")
                        .HasDatabaseName("ix_user_profile_data_reports_reporting_user_uid");

                    b.ToTable("user_profile_data_reports", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.UserRestraintData", b =>
                {
                    b.Property<string>("UserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<byte>("ActiveLayers")
                        .HasColumnType("smallint")
                        .HasColumnName("active_layers");

                    b.Property<string>("Enabler")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("enabler");

                    b.Property<Guid>("Identifier")
                        .HasColumnType("uuid")
                        .HasColumnName("identifier");

                    b.Property<int>("Padlock")
                        .HasColumnType("integer")
                        .HasColumnName("padlock");

                    b.Property<string>("PadlockAssigner")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("padlock_assigner");

                    b.Property<string>("Password")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("password");

                    b.Property<DateTimeOffset>("Timer")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timer");

                    b.HasKey("UserUID")
                        .HasName("pk_user_restraintset_data");

                    b.HasIndex("UserUID")
                        .HasDatabaseName("ix_user_restraintset_data_user_uid");

                    b.ToTable("user_restraintset_data", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.UserRestrictionData", b =>
                {
                    b.Property<string>("UserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid")
                        .HasColumnOrder(0);

                    b.Property<byte>("Layer")
                        .HasColumnType("smallint")
                        .HasColumnName("layer")
                        .HasColumnOrder(1);

                    b.Property<string>("Enabler")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("enabler");

                    b.Property<Guid>("Identifier")
                        .HasColumnType("uuid")
                        .HasColumnName("identifier");

                    b.Property<int>("Padlock")
                        .HasColumnType("integer")
                        .HasColumnName("padlock");

                    b.Property<string>("PadlockAssigner")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("padlock_assigner");

                    b.Property<string>("Password")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("password");

                    b.Property<DateTimeOffset>("Timer")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timer");

                    b.HasKey("UserUID", "Layer")
                        .HasName("pk_user_restriction_data");

                    b.HasIndex("UserUID", "Layer")
                        .IsUnique()
                        .HasDatabaseName("ix_user_restriction_data_user_uid_layer");

                    b.ToTable("user_restriction_data", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.AccountClaimAuth", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .HasConstraintName("fk_account_claim_auth_users_user_uid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.Auth", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "PrimaryUser")
                        .WithMany()
                        .HasForeignKey("PrimaryUserUID")
                        .HasConstraintName("fk_auth_users_primary_user_uid");

                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .HasConstraintName("fk_auth_users_user_uid");

                    b.Navigation("PrimaryUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.ClientPair", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "OtherUser")
                        .WithMany()
                        .HasForeignKey("OtherUserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_pairs_users_other_user_uid");

                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_pairs_users_user_uid");

                    b.Navigation("OtherUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.ClientPairPermissionAccess", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "OtherUser")
                        .WithMany()
                        .HasForeignKey("OtherUserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_pair_permissions_access_users_other_user_uid");

                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_pair_permissions_access_users_user_uid");

                    b.Navigation("OtherUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.ClientPairPermissions", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "OtherUser")
                        .WithMany()
                        .HasForeignKey("OtherUserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_pair_permissions_users_other_user_uid");

                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_pair_permissions_users_user_uid");

                    b.Navigation("OtherUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.KinksterRequest", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "OtherUser")
                        .WithMany()
                        .HasForeignKey("OtherUserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_kinkster_pair_requests_users_other_user_uid");

                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_kinkster_pair_requests_users_user_uid");

                    b.Navigation("OtherUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.LikesMoodles", b =>
                {
                    b.HasOne("GagspeakShared.Models.MoodleStatus", "MoodleStatus")
                        .WithMany("LikesMoodles")
                        .HasForeignKey("MoodleStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_likes_moodles_moodles_moodle_status_id");

                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_likes_moodles_users_user_uid");

                    b.Navigation("MoodleStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.LikesPatterns", b =>
                {
                    b.HasOne("GagspeakShared.Models.PatternEntry", "PatternEntry")
                        .WithMany("UserPatternLikes")
                        .HasForeignKey("PatternEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_likes_patterns_patterns_pattern_entry_id");

                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_likes_patterns_users_user_uid");

                    b.Navigation("PatternEntry");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.MoodleKeyword", b =>
                {
                    b.HasOne("GagspeakShared.Models.Keyword", "Keyword")
                        .WithMany("MoodleKeywords")
                        .HasForeignKey("KeywordWord")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_moodle_keywords_keywords_keyword_word");

                    b.HasOne("GagspeakShared.Models.MoodleStatus", "MoodleStatus")
                        .WithMany("MoodleKeywords")
                        .HasForeignKey("MoodleStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_moodle_keywords_moodles_moodle_status_id");

                    b.Navigation("Keyword");

                    b.Navigation("MoodleStatus");
                });

            modelBuilder.Entity("GagspeakShared.Models.PatternKeyword", b =>
                {
                    b.HasOne("GagspeakShared.Models.Keyword", "Keyword")
                        .WithMany("PatternKeywords")
                        .HasForeignKey("KeywordWord")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pattern_keywords_keywords_keyword_word");

                    b.HasOne("GagspeakShared.Models.PatternEntry", "PatternEntry")
                        .WithMany("PatternKeywords")
                        .HasForeignKey("PatternEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pattern_keywords_patterns_pattern_entry_id");

                    b.Navigation("Keyword");

                    b.Navigation("PatternEntry");
                });

            modelBuilder.Entity("GagspeakShared.Models.UserAchievementData", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_achievement_data_users_user_uid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.UserGagData", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_gag_data_users_user_uid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.UserGlobalPermissions", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_global_permissions_users_user_uid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.UserProfileData", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_profile_data_users_user_uid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.UserProfileDataReport", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "ReportedUser")
                        .WithMany()
                        .HasForeignKey("ReportedUserUID")
                        .HasConstraintName("fk_user_profile_data_reports_users_reported_user_uid");

                    b.HasOne("GagspeakShared.Models.User", "ReportingUser")
                        .WithMany()
                        .HasForeignKey("ReportingUserUID")
                        .HasConstraintName("fk_user_profile_data_reports_users_reporting_user_uid");

                    b.Navigation("ReportedUser");

                    b.Navigation("ReportingUser");
                });

            modelBuilder.Entity("GagspeakShared.Models.UserRestraintData", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_restraintset_data_users_user_uid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.UserRestrictionData", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_restriction_data_users_user_uid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.Keyword", b =>
                {
                    b.Navigation("MoodleKeywords");

                    b.Navigation("PatternKeywords");
                });

            modelBuilder.Entity("GagspeakShared.Models.MoodleStatus", b =>
                {
                    b.Navigation("LikesMoodles");

                    b.Navigation("MoodleKeywords");
                });

            modelBuilder.Entity("GagspeakShared.Models.PatternEntry", b =>
                {
                    b.Navigation("PatternKeywords");

                    b.Navigation("UserPatternLikes");
                });
#pragma warning restore 612, 618
        }
    }
}
