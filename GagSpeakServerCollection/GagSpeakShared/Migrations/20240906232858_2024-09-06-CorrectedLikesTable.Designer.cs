// <auto-generated />
using System;
using GagspeakShared.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GagSpeakShared.Migrations
{
    [DbContext(typeof(GagspeakDbContext))]
    [Migration("20240906232858_2024-09-06-CorrectedLikesTable")]
    partial class _20240906CorrectedLikesTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GagspeakShared.Models.AccountClaimAuth", b =>
                {
                    b.Property<decimal>("DiscordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("discord_id");

                    b.Property<string>("InitialGeneratedKey")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("initial_generated_key");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<string>("UserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<string>("VerificationCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("verification_code");

                    b.HasKey("DiscordId")
                        .HasName("pk_account_claim_auth");

                    b.HasIndex("UserUID")
                        .HasDatabaseName("ix_account_claim_auth_user_uid");

                    b.ToTable("account_claim_auth", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.Auth", b =>
                {
                    b.Property<string>("HashedKey")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("hashed_key");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("boolean")
                        .HasColumnName("is_banned");

                    b.Property<string>("PrimaryUserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("primary_user_uid");

                    b.Property<string>("UserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.HasKey("HashedKey")
                        .HasName("pk_auth");

                    b.HasIndex("PrimaryUserUID")
                        .HasDatabaseName("ix_auth_primary_user_uid");

                    b.HasIndex("UserUID")
                        .HasDatabaseName("ix_auth_user_uid");

                    b.ToTable("auth", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.Banned", b =>
                {
                    b.Property<string>("CharacterIdentification")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("character_identification");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("timestamp");

                    b.HasKey("CharacterIdentification")
                        .HasName("pk_banned_users");

                    b.ToTable("banned_users", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.BannedRegistrations", b =>
                {
                    b.Property<string>("DiscordId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("discord_id");

                    b.HasKey("DiscordId")
                        .HasName("pk_banned_registrations");

                    b.ToTable("banned_registrations", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.ClientPair", b =>
                {
                    b.Property<string>("UserUID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<string>("OtherUserUID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("other_user_uid");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("timestamp");

                    b.HasKey("UserUID", "OtherUserUID")
                        .HasName("pk_client_pairs");

                    b.HasIndex("OtherUserUID")
                        .HasDatabaseName("ix_client_pairs_other_user_uid");

                    b.HasIndex("UserUID")
                        .HasDatabaseName("ix_client_pairs_user_uid");

                    b.ToTable("client_pairs", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.ClientPairPermissionAccess", b =>
                {
                    b.Property<string>("UserUID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<string>("OtherUserUID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("other_user_uid");

                    b.Property<bool>("AllowAllRequestsAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_all_requests_allowed");

                    b.Property<bool>("AllowMotionRequestsAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_motion_requests_allowed");

                    b.Property<bool>("AllowNegativeStatusTypesAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_negative_status_types_allowed");

                    b.Property<bool>("AllowPermanentMoodlesAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_permanent_moodles_allowed");

                    b.Property<bool>("AllowPositiveStatusTypesAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_positive_status_types_allowed");

                    b.Property<bool>("AllowRemovingMoodlesAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_removing_moodles_allowed");

                    b.Property<bool>("AllowSitRequestsAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_sit_requests_allowed");

                    b.Property<bool>("AllowSpecialStatusTypesAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_special_status_types_allowed");

                    b.Property<bool>("ApplyRestraintSetsAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("apply_restraint_sets_allowed");

                    b.Property<bool>("CanControlIntensityAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("can_control_intensity_allowed");

                    b.Property<bool>("CanExecutePatternsAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("can_execute_patterns_allowed");

                    b.Property<bool>("CanExecuteTriggersAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("can_execute_triggers_allowed");

                    b.Property<bool>("CanSendTriggersAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("can_send_triggers_allowed");

                    b.Property<bool>("CanUseRealtimeVibeRemoteAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("can_use_realtime_vibe_remote_allowed");

                    b.Property<bool>("ChangeToyStateAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("change_toy_state_allowed");

                    b.Property<bool>("CommandsFromFriendsAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("commands_from_friends_allowed");

                    b.Property<bool>("CommandsFromPartyAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("commands_from_party_allowed");

                    b.Property<bool>("ExtendedLockTimesAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("extended_lock_times_allowed");

                    b.Property<bool>("GagFeaturesAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("gag_features_allowed");

                    b.Property<bool>("ItemAutoEquipAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("item_auto_equip_allowed");

                    b.Property<bool>("LiveChatGarblerActiveAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("live_chat_garbler_active_allowed");

                    b.Property<bool>("LiveChatGarblerLockedAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("live_chat_garbler_locked_allowed");

                    b.Property<bool>("LockRestraintSetsAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("lock_restraint_sets_allowed");

                    b.Property<bool>("LockToyboxUIAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("lock_toybox_ui_allowed");

                    b.Property<bool>("MaxAllowedRestraintTimeAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("max_allowed_restraint_time_allowed");

                    b.Property<bool>("MaxLockTimeAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("max_lock_time_allowed");

                    b.Property<bool>("MaxMoodleTimeAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("max_moodle_time_allowed");

                    b.Property<bool>("MoodlesEnabledAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("moodles_enabled_allowed");

                    b.Property<bool>("OwnerLocksAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("owner_locks_allowed");

                    b.Property<bool>("PairCanApplyOwnMoodlesToYouAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("pair_can_apply_own_moodles_to_you_allowed");

                    b.Property<bool>("PairCanApplyYourMoodlesToYouAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("pair_can_apply_your_moodles_to_you_allowed");

                    b.Property<bool>("PuppeteerEnabledAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("puppeteer_enabled_allowed");

                    b.Property<bool>("RemoveRestraintSetsAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("remove_restraint_sets_allowed");

                    b.Property<bool>("RestraintSetAutoEquipAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("restraint_set_auto_equip_allowed");

                    b.Property<bool>("SpatialVibratorAudioAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("spatial_vibrator_audio_allowed");

                    b.Property<bool>("ToyIsActiveAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("toy_is_active_allowed");

                    b.Property<bool>("ToyboxEnabledAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("toybox_enabled_allowed");

                    b.Property<bool>("UnlockRestraintSetsAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("unlock_restraint_sets_allowed");

                    b.Property<bool>("VibratorAlarmsAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("vibrator_alarms_allowed");

                    b.Property<bool>("VibratorAlarmsToggleAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("vibrator_alarms_toggle_allowed");

                    b.Property<bool>("WardrobeEnabledAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("wardrobe_enabled_allowed");

                    b.HasKey("UserUID", "OtherUserUID")
                        .HasName("pk_client_pair_permissions_access");

                    b.HasIndex("OtherUserUID")
                        .HasDatabaseName("ix_client_pair_permissions_access_other_user_uid");

                    b.HasIndex("UserUID")
                        .HasDatabaseName("ix_client_pair_permissions_access_user_uid");

                    b.ToTable("client_pair_permissions_access", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.ClientPairPermissions", b =>
                {
                    b.Property<string>("UserUID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<string>("OtherUserUID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("other_user_uid");

                    b.Property<bool>("AllowAllRequests")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_all_requests");

                    b.Property<bool>("AllowBlindfold")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_blindfold");

                    b.Property<bool>("AllowForcedFollow")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_forced_follow");

                    b.Property<bool>("AllowForcedSit")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_forced_sit");

                    b.Property<bool>("AllowForcedToStay")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_forced_to_stay");

                    b.Property<bool>("AllowMotionRequests")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_motion_requests");

                    b.Property<bool>("AllowNegativeStatusTypes")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_negative_status_types");

                    b.Property<bool>("AllowPermanentMoodles")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_permanent_moodles");

                    b.Property<bool>("AllowPositiveStatusTypes")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_positive_status_types");

                    b.Property<bool>("AllowRemovingMoodles")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_removing_moodles");

                    b.Property<bool>("AllowSitRequests")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_sit_requests");

                    b.Property<bool>("AllowSpecialStatusTypes")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_special_status_types");

                    b.Property<bool>("ApplyRestraintSets")
                        .HasColumnType("boolean")
                        .HasColumnName("apply_restraint_sets");

                    b.Property<bool>("CanControlIntensity")
                        .HasColumnType("boolean")
                        .HasColumnName("can_control_intensity");

                    b.Property<bool>("CanExecutePatterns")
                        .HasColumnType("boolean")
                        .HasColumnName("can_execute_patterns");

                    b.Property<bool>("CanExecuteTriggers")
                        .HasColumnType("boolean")
                        .HasColumnName("can_execute_triggers");

                    b.Property<bool>("CanSendTriggers")
                        .HasColumnType("boolean")
                        .HasColumnName("can_send_triggers");

                    b.Property<bool>("CanUseRealtimeVibeRemote")
                        .HasColumnType("boolean")
                        .HasColumnName("can_use_realtime_vibe_remote");

                    b.Property<bool>("ChangeToyState")
                        .HasColumnType("boolean")
                        .HasColumnName("change_toy_state");

                    b.Property<char>("EndChar")
                        .HasColumnType("character(1)")
                        .HasColumnName("end_char");

                    b.Property<bool>("ExtendedLockTimes")
                        .HasColumnType("boolean")
                        .HasColumnName("extended_lock_times");

                    b.Property<bool>("ForceLockFirstPerson")
                        .HasColumnType("boolean")
                        .HasColumnName("force_lock_first_person");

                    b.Property<bool>("GagFeatures")
                        .HasColumnType("boolean")
                        .HasColumnName("gag_features");

                    b.Property<bool>("InHardcore")
                        .HasColumnType("boolean")
                        .HasColumnName("in_hardcore");

                    b.Property<bool>("IsBlindfolded")
                        .HasColumnType("boolean")
                        .HasColumnName("is_blindfolded");

                    b.Property<bool>("IsForcedToFollow")
                        .HasColumnType("boolean")
                        .HasColumnName("is_forced_to_follow");

                    b.Property<bool>("IsForcedToSit")
                        .HasColumnType("boolean")
                        .HasColumnName("is_forced_to_sit");

                    b.Property<bool>("IsForcedToStay")
                        .HasColumnType("boolean")
                        .HasColumnName("is_forced_to_stay");

                    b.Property<bool>("IsPaused")
                        .HasColumnType("boolean")
                        .HasColumnName("is_paused");

                    b.Property<bool>("LockRestraintSets")
                        .HasColumnType("boolean")
                        .HasColumnName("lock_restraint_sets");

                    b.Property<TimeSpan>("MaxAllowedRestraintTime")
                        .HasColumnType("interval")
                        .HasColumnName("max_allowed_restraint_time");

                    b.Property<TimeSpan>("MaxLockTime")
                        .HasColumnType("interval")
                        .HasColumnName("max_lock_time");

                    b.Property<TimeSpan>("MaxMoodleTime")
                        .HasColumnType("interval")
                        .HasColumnName("max_moodle_time");

                    b.Property<bool>("OwnerLocks")
                        .HasColumnType("boolean")
                        .HasColumnName("owner_locks");

                    b.Property<bool>("PairCanApplyOwnMoodlesToYou")
                        .HasColumnType("boolean")
                        .HasColumnName("pair_can_apply_own_moodles_to_you");

                    b.Property<bool>("PairCanApplyYourMoodlesToYou")
                        .HasColumnType("boolean")
                        .HasColumnName("pair_can_apply_your_moodles_to_you");

                    b.Property<bool>("RemoveRestraintSets")
                        .HasColumnType("boolean")
                        .HasColumnName("remove_restraint_sets");

                    b.Property<char>("StartChar")
                        .HasColumnType("character(1)")
                        .HasColumnName("start_char");

                    b.Property<string>("TriggerPhrase")
                        .HasColumnType("text")
                        .HasColumnName("trigger_phrase");

                    b.Property<bool>("UnlockRestraintSets")
                        .HasColumnType("boolean")
                        .HasColumnName("unlock_restraint_sets");

                    b.Property<bool>("VibratorAlarms")
                        .HasColumnType("boolean")
                        .HasColumnName("vibrator_alarms");

                    b.Property<bool>("VibratorAlarmsToggle")
                        .HasColumnType("boolean")
                        .HasColumnName("vibrator_alarms_toggle");

                    b.HasKey("UserUID", "OtherUserUID")
                        .HasName("pk_client_pair_permissions");

                    b.HasIndex("OtherUserUID")
                        .HasDatabaseName("ix_client_pair_permissions_other_user_uid");

                    b.HasIndex("UserUID")
                        .HasDatabaseName("ix_client_pair_permissions_user_uid");

                    b.ToTable("client_pair_permissions", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.PatternEntry", b =>
                {
                    b.Property<Guid>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("identifier");

                    b.Property<string>("Author")
                        .HasColumnType("text")
                        .HasColumnName("author");

                    b.Property<string>("Base64PatternData")
                        .HasColumnType("text")
                        .HasColumnName("base64pattern_data");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<int>("DownloadCount")
                        .HasColumnType("integer")
                        .HasColumnName("download_count");

                    b.Property<TimeSpan>("Length")
                        .HasColumnType("interval")
                        .HasColumnName("length");

                    b.Property<string>("Name")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("name");

                    b.Property<string>("PublisherUID")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasColumnName("publisher_uid");

                    b.Property<bool>("ShouldLoop")
                        .HasColumnType("boolean")
                        .HasColumnName("should_loop");

                    b.Property<DateTime>("TimePublished")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_published");

                    b.Property<bool>("UsesOscillation")
                        .HasColumnType("boolean")
                        .HasColumnName("uses_oscillation");

                    b.Property<bool>("UsesRotations")
                        .HasColumnType("boolean")
                        .HasColumnName("uses_rotations");

                    b.Property<bool>("UsesVibrations")
                        .HasColumnType("boolean")
                        .HasColumnName("uses_vibrations");

                    b.HasKey("Identifier")
                        .HasName("pk_pattern_entry");

                    b.HasIndex("PublisherUID")
                        .HasDatabaseName("ix_pattern_entry_publisher_uid");

                    b.ToTable("pattern_entry", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.PatternEntryTag", b =>
                {
                    b.Property<Guid>("PatternEntryId")
                        .HasColumnType("uuid")
                        .HasColumnName("pattern_entry_id")
                        .HasColumnOrder(1);

                    b.Property<string>("TagName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("tag_name")
                        .HasColumnOrder(2);

                    b.HasKey("PatternEntryId", "TagName")
                        .HasName("pk_pattern_entry_tags");

                    b.HasIndex("PatternEntryId")
                        .HasDatabaseName("ix_pattern_entry_tags_pattern_entry_id");

                    b.HasIndex("TagName")
                        .HasDatabaseName("ix_pattern_entry_tags_tag_name");

                    b.ToTable("pattern_entry_tags", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.PatternTag", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Name")
                        .HasName("pk_pattern_tags");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_pattern_tags_name");

                    b.ToTable("pattern_tags", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.PrivateRoom", b =>
                {
                    b.Property<string>("NameID")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name_id");

                    b.Property<string>("HostUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("host_uid");

                    b.Property<DateTime>("TimeMade")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_made");

                    b.HasKey("NameID")
                        .HasName("pk_private_rooms");

                    b.HasIndex("HostUID")
                        .HasDatabaseName("ix_private_rooms_host_uid");

                    b.HasIndex("NameID")
                        .IsUnique()
                        .HasDatabaseName("ix_private_rooms_name_id");

                    b.ToTable("private_rooms", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.PrivateRoomPair", b =>
                {
                    b.Property<string>("PrivateRoomNameID")
                        .HasColumnType("character varying(50)")
                        .HasColumnName("private_room_name_id");

                    b.Property<string>("PrivateRoomUserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("private_room_user_uid");

                    b.Property<bool>("AllowingVibe")
                        .HasColumnType("boolean")
                        .HasColumnName("allowing_vibe");

                    b.Property<string>("ChatAlias")
                        .HasColumnType("text")
                        .HasColumnName("chat_alias");

                    b.Property<bool>("InRoom")
                        .HasColumnType("boolean")
                        .HasColumnName("in_room");

                    b.HasKey("PrivateRoomNameID", "PrivateRoomUserUID")
                        .HasName("pk_private_room_users");

                    b.HasIndex("PrivateRoomNameID")
                        .HasDatabaseName("ix_private_room_users_private_room_name_id");

                    b.HasIndex("PrivateRoomUserUID")
                        .HasDatabaseName("ix_private_room_users_private_room_user_uid");

                    b.ToTable("private_room_users", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.User", b =>
                {
                    b.Property<string>("UID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("uid");

                    b.Property<string>("Alias")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("alias");

                    b.Property<DateTime>("FirstUploadTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("first_upload_timestamp");

                    b.Property<DateTime>("LastLoggedIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_logged_in");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("timestamp");

                    b.Property<int>("UploadLimitCounter")
                        .HasColumnType("integer")
                        .HasColumnName("upload_limit_counter");

                    b.Property<int>("VanityTier")
                        .HasColumnType("integer")
                        .HasColumnName("vanity_tier");

                    b.HasKey("UID")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.UserActiveStateData", b =>
                {
                    b.Property<string>("UserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<string>("ToyboxActivePatternName")
                        .HasColumnType("text")
                        .HasColumnName("toybox_active_pattern_name");

                    b.Property<string>("ActiveSetEnabler")
                        .HasColumnType("text")
                        .HasColumnName("wardrobe_active_set_assigner");

                    b.Property<string>("ActiveSetLockAssigner")
                        .HasColumnType("text")
                        .HasColumnName("wardrobe_active_set_lock_assigner");

                    b.Property<DateTimeOffset>("ActiveSetLockTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("wardrobe_active_set_lock_time");

                    b.Property<string>("ActiveSetName")
                        .HasColumnType("text")
                        .HasColumnName("wardrobe_active_set_name");

                    b.Property<string>("ActiveSetPadLock")
                        .HasColumnType("text")
                        .HasColumnName("wardrobe_active_set_pad_lock");

                    b.Property<string>("ActiveSetPassword")
                        .HasColumnType("text")
                        .HasColumnName("wardrobe_active_set_password");

                    b.HasKey("UserUID")
                        .HasName("pk_user_active_state_data");

                    b.ToTable("user_active_state_data", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.UserGagAppearanceData", b =>
                {
                    b.Property<string>("UserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<string>("SlotOneGagAssigner")
                        .HasColumnType("text")
                        .HasColumnName("slot_one_gag_assigner");

                    b.Property<string>("SlotOneGagPadlock")
                        .HasColumnType("text")
                        .HasColumnName("slot_one_gag_padlock");

                    b.Property<string>("SlotOneGagPassword")
                        .HasColumnType("text")
                        .HasColumnName("slot_one_gag_password");

                    b.Property<DateTimeOffset>("SlotOneGagTimer")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("slot_one_gag_timer");

                    b.Property<string>("SlotOneGagType")
                        .HasColumnType("text")
                        .HasColumnName("slot_one_gag_type");

                    b.Property<string>("SlotThreeGagAssigner")
                        .HasColumnType("text")
                        .HasColumnName("slot_three_gag_assigner");

                    b.Property<string>("SlotThreeGagPadlock")
                        .HasColumnType("text")
                        .HasColumnName("slot_three_gag_padlock");

                    b.Property<string>("SlotThreeGagPassword")
                        .HasColumnType("text")
                        .HasColumnName("slot_three_gag_password");

                    b.Property<DateTimeOffset>("SlotThreeGagTimer")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("slot_three_gag_timer");

                    b.Property<string>("SlotThreeGagType")
                        .HasColumnType("text")
                        .HasColumnName("slot_three_gag_type");

                    b.Property<string>("SlotTwoGagAssigner")
                        .HasColumnType("text")
                        .HasColumnName("slot_two_gag_assigner");

                    b.Property<string>("SlotTwoGagPadlock")
                        .HasColumnType("text")
                        .HasColumnName("slot_two_gag_padlock");

                    b.Property<string>("SlotTwoGagPassword")
                        .HasColumnType("text")
                        .HasColumnName("slot_two_gag_password");

                    b.Property<DateTimeOffset>("SlotTwoGagTimer")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("slot_two_gag_timer");

                    b.Property<string>("SlotTwoGagType")
                        .HasColumnType("text")
                        .HasColumnName("slot_two_gag_type");

                    b.HasKey("UserUID")
                        .HasName("pk_user_appearance_data");

                    b.ToTable("user_appearance_data", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.UserGlobalPermissions", b =>
                {
                    b.Property<string>("UserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<bool>("CommandsFromFriends")
                        .HasColumnType("boolean")
                        .HasColumnName("commands_from_friends");

                    b.Property<bool>("CommandsFromParty")
                        .HasColumnType("boolean")
                        .HasColumnName("commands_from_party");

                    b.Property<bool>("GlobalAllowAllRequests")
                        .HasColumnType("boolean")
                        .HasColumnName("global_allow_all_requests");

                    b.Property<bool>("GlobalAllowMotionRequests")
                        .HasColumnType("boolean")
                        .HasColumnName("global_allow_motion_requests");

                    b.Property<bool>("GlobalAllowSitRequests")
                        .HasColumnType("boolean")
                        .HasColumnName("global_allow_sit_requests");

                    b.Property<string>("GlobalTriggerPhrase")
                        .HasColumnType("text")
                        .HasColumnName("global_trigger_phrase");

                    b.Property<bool>("HardcoreSafewordUsed")
                        .HasColumnType("boolean")
                        .HasColumnName("hardcore_safeword_used");

                    b.Property<bool>("ItemAutoEquip")
                        .HasColumnType("boolean")
                        .HasColumnName("item_auto_equip");

                    b.Property<bool>("LiveChatGarblerActive")
                        .HasColumnType("boolean")
                        .HasColumnName("live_chat_garbler_active");

                    b.Property<bool>("LiveChatGarblerLocked")
                        .HasColumnType("boolean")
                        .HasColumnName("live_chat_garbler_locked");

                    b.Property<bool>("LockToyboxUI")
                        .HasColumnType("boolean")
                        .HasColumnName("lock_toybox_ui");

                    b.Property<bool>("MoodlesEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("moodles_enabled");

                    b.Property<bool>("PuppeteerEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("puppeteer_enabled");

                    b.Property<bool>("RestraintSetAutoEquip")
                        .HasColumnType("boolean")
                        .HasColumnName("restraint_set_auto_equip");

                    b.Property<string>("Safeword")
                        .HasColumnType("text")
                        .HasColumnName("safeword");

                    b.Property<bool>("SafewordUsed")
                        .HasColumnType("boolean")
                        .HasColumnName("safeword_used");

                    b.Property<bool>("SpatialVibratorAudio")
                        .HasColumnType("boolean")
                        .HasColumnName("spatial_vibrator_audio");

                    b.Property<int>("ToyIntensity")
                        .HasColumnType("integer")
                        .HasColumnName("toy_intensity");

                    b.Property<bool>("ToyIsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("toy_is_active");

                    b.Property<bool>("ToyboxEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("toybox_enabled");

                    b.Property<bool>("WardrobeEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("wardrobe_enabled");

                    b.HasKey("UserUID")
                        .HasName("pk_user_global_permissions");

                    b.ToTable("user_global_permissions", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.UserPatternLikes", b =>
                {
                    b.Property<string>("UserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<Guid>("PatternEntryId")
                        .HasColumnType("uuid")
                        .HasColumnName("pattern_entry_id");

                    b.HasKey("UserUID", "PatternEntryId")
                        .HasName("pk_user_pattern_likes");

                    b.HasIndex("PatternEntryId")
                        .HasDatabaseName("ix_user_pattern_likes_pattern_entry_id");

                    b.ToTable("user_pattern_likes", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.UserProfileData", b =>
                {
                    b.Property<string>("UserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<string>("Base64ProfilePic")
                        .HasColumnType("text")
                        .HasColumnName("base64profile_pic");

                    b.Property<bool>("FlaggedForReport")
                        .HasColumnType("boolean")
                        .HasColumnName("flagged_for_report");

                    b.Property<bool>("ProfileDisabled")
                        .HasColumnType("boolean")
                        .HasColumnName("profile_disabled");

                    b.Property<string>("UserDescription")
                        .HasColumnType("text")
                        .HasColumnName("user_description");

                    b.HasKey("UserUID")
                        .HasName("pk_user_profile_data");

                    b.ToTable("user_profile_data", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.UserProfileDataReport", b =>
                {
                    b.Property<int>("ReportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("report_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReportID"));

                    b.Property<string>("ReportReason")
                        .HasColumnType("text")
                        .HasColumnName("report_reason");

                    b.Property<DateTime>("ReportTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("report_time");

                    b.Property<string>("ReportedUserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("reported_user_uid");

                    b.Property<string>("ReportingUserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("reporting_user_uid");

                    b.HasKey("ReportID")
                        .HasName("pk_user_profile_data_reports");

                    b.HasIndex("ReportedUserUID")
                        .HasDatabaseName("ix_user_profile_data_reports_reported_user_uid");

                    b.HasIndex("ReportingUserUID")
                        .HasDatabaseName("ix_user_profile_data_reports_reporting_user_uid");

                    b.ToTable("user_profile_data_reports", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.AccountClaimAuth", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .HasConstraintName("fk_account_claim_auth_users_user_uid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.Auth", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "PrimaryUser")
                        .WithMany()
                        .HasForeignKey("PrimaryUserUID")
                        .HasConstraintName("fk_auth_users_primary_user_uid");

                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .HasConstraintName("fk_auth_users_user_uid");

                    b.Navigation("PrimaryUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.ClientPair", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "OtherUser")
                        .WithMany()
                        .HasForeignKey("OtherUserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_pairs_users_other_user_uid");

                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_pairs_users_user_uid");

                    b.Navigation("OtherUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.ClientPairPermissionAccess", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "OtherUser")
                        .WithMany()
                        .HasForeignKey("OtherUserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_pair_permissions_access_users_other_user_uid");

                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_pair_permissions_access_users_user_uid");

                    b.Navigation("OtherUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.ClientPairPermissions", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "OtherUser")
                        .WithMany()
                        .HasForeignKey("OtherUserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_pair_permissions_users_other_user_uid");

                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_pair_permissions_users_user_uid");

                    b.Navigation("OtherUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.PatternEntry", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pattern_entry_users_publisher_uid");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("GagspeakShared.Models.PatternEntryTag", b =>
                {
                    b.HasOne("GagspeakShared.Models.PatternEntry", "PatternEntry")
                        .WithMany("PatternEntryTags")
                        .HasForeignKey("PatternEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pattern_entry_tags_patterns_pattern_entry_id");

                    b.HasOne("GagspeakShared.Models.PatternTag", "Tag")
                        .WithMany("PatternEntryTags")
                        .HasForeignKey("TagName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pattern_entry_tags_pattern_tags_tag_name");

                    b.Navigation("PatternEntry");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("GagspeakShared.Models.PrivateRoom", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "Host")
                        .WithMany()
                        .HasForeignKey("HostUID")
                        .HasConstraintName("fk_private_rooms_users_host_uid");

                    b.Navigation("Host");
                });

            modelBuilder.Entity("GagspeakShared.Models.PrivateRoomPair", b =>
                {
                    b.HasOne("GagspeakShared.Models.PrivateRoom", "PrivateRoom")
                        .WithMany()
                        .HasForeignKey("PrivateRoomNameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_private_room_users_private_rooms_private_room_name_id");

                    b.HasOne("GagspeakShared.Models.User", "PrivateRoomUser")
                        .WithMany()
                        .HasForeignKey("PrivateRoomUserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_private_room_users_users_private_room_user_uid");

                    b.Navigation("PrivateRoom");

                    b.Navigation("PrivateRoomUser");
                });

            modelBuilder.Entity("GagspeakShared.Models.UserActiveStateData", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_active_state_data_users_user_uid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.UserGagAppearanceData", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_appearance_data_users_user_uid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.UserGlobalPermissions", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_global_permissions_users_user_uid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.UserPatternLikes", b =>
                {
                    b.HasOne("GagspeakShared.Models.PatternEntry", "PatternEntry")
                        .WithMany("UserPatternLikes")
                        .HasForeignKey("PatternEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_pattern_likes_patterns_pattern_entry_id");

                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_pattern_likes_users_user_uid");

                    b.Navigation("PatternEntry");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.UserProfileData", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_profile_data_users_user_uid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.UserProfileDataReport", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "ReportedUser")
                        .WithMany()
                        .HasForeignKey("ReportedUserUID")
                        .HasConstraintName("fk_user_profile_data_reports_users_reported_user_uid");

                    b.HasOne("GagspeakShared.Models.User", "ReportingUser")
                        .WithMany()
                        .HasForeignKey("ReportingUserUID")
                        .HasConstraintName("fk_user_profile_data_reports_users_reporting_user_uid");

                    b.Navigation("ReportedUser");

                    b.Navigation("ReportingUser");
                });

            modelBuilder.Entity("GagspeakShared.Models.PatternEntry", b =>
                {
                    b.Navigation("PatternEntryTags");

                    b.Navigation("UserPatternLikes");
                });

            modelBuilder.Entity("GagspeakShared.Models.PatternTag", b =>
                {
                    b.Navigation("PatternEntryTags");
                });
#pragma warning restore 612, 618
        }
    }
}
