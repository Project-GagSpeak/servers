// <auto-generated />
using System;
using GagspeakShared.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GagSpeakShared.Migrations
{
    [DbContext(typeof(GagspeakDbContext))]
    [Migration("20250405223337_2025-04-05ResetTables")]
    partial class _20250405ResetTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GagspeakShared.Models.AccountClaimAuth", b =>
                {
                    b.Property<decimal>("DiscordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("discord_id");

                    b.Property<string>("InitialGeneratedKey")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("initial_generated_key");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<string>("UserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<string>("VerificationCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("verification_code");

                    b.HasKey("DiscordId")
                        .HasName("pk_account_claim_auth");

                    b.HasIndex("UserUID")
                        .HasDatabaseName("ix_account_claim_auth_user_uid");

                    b.ToTable("account_claim_auth", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.Auth", b =>
                {
                    b.Property<string>("HashedKey")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("hashed_key");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("boolean")
                        .HasColumnName("is_banned");

                    b.Property<string>("PrimaryUserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("primary_user_uid");

                    b.Property<string>("UserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.HasKey("HashedKey")
                        .HasName("pk_auth");

                    b.HasIndex("PrimaryUserUID")
                        .HasDatabaseName("ix_auth_primary_user_uid");

                    b.HasIndex("UserUID")
                        .HasDatabaseName("ix_auth_user_uid");

                    b.ToTable("auth", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.Banned", b =>
                {
                    b.Property<string>("CharacterIdentification")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("character_identification");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<string>("UserUID")
                        .HasColumnType("text")
                        .HasColumnName("user_uid");

                    b.HasKey("CharacterIdentification")
                        .HasName("pk_banned_users");

                    b.ToTable("banned_users", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.BannedRegistrations", b =>
                {
                    b.Property<string>("DiscordId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("discord_id");

                    b.HasKey("DiscordId")
                        .HasName("pk_banned_registrations");

                    b.ToTable("banned_registrations", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.ClientPair", b =>
                {
                    b.Property<string>("UserUID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<string>("OtherUserUID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("other_user_uid");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("timestamp");

                    b.HasKey("UserUID", "OtherUserUID")
                        .HasName("pk_client_pairs");

                    b.HasIndex("OtherUserUID")
                        .HasDatabaseName("ix_client_pairs_other_user_uid");

                    b.HasIndex("UserUID")
                        .HasDatabaseName("ix_client_pairs_user_uid");

                    b.ToTable("client_pairs", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.Keyword", b =>
                {
                    b.Property<string>("Word")
                        .HasColumnType("text")
                        .HasColumnName("word");

                    b.HasKey("Word")
                        .HasName("pk_keywords");

                    b.HasIndex("Word")
                        .IsUnique()
                        .HasDatabaseName("ix_keywords_word");

                    b.ToTable("keywords", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.KinksterRequest", b =>
                {
                    b.Property<string>("UserUID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<string>("OtherUserUID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("other_user_uid");

                    b.Property<string>("AttachedMessage")
                        .HasColumnType("text")
                        .HasColumnName("attached_message");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time");

                    b.HasKey("UserUID", "OtherUserUID")
                        .HasName("pk_kinkster_pair_requests");

                    b.HasIndex("OtherUserUID")
                        .HasDatabaseName("ix_kinkster_pair_requests_other_user_uid");

                    b.HasIndex("UserUID")
                        .HasDatabaseName("ix_kinkster_pair_requests_user_uid");

                    b.ToTable("kinkster_pair_requests", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.LikesMoodles", b =>
                {
                    b.Property<string>("UserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<Guid>("MoodleStatusId")
                        .HasColumnType("uuid")
                        .HasColumnName("moodle_status_id");

                    b.HasKey("UserUID", "MoodleStatusId")
                        .HasName("pk_likes_moodles");

                    b.HasIndex("MoodleStatusId")
                        .HasDatabaseName("ix_likes_moodles_moodle_status_id");

                    b.ToTable("likes_moodles", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.LikesPatterns", b =>
                {
                    b.Property<string>("UserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<Guid>("PatternEntryId")
                        .HasColumnType("uuid")
                        .HasColumnName("pattern_entry_id");

                    b.HasKey("UserUID", "PatternEntryId")
                        .HasName("pk_likes_patterns");

                    b.HasIndex("PatternEntryId")
                        .HasDatabaseName("ix_likes_patterns_pattern_entry_id");

                    b.ToTable("likes_patterns", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.MoodleKeyword", b =>
                {
                    b.Property<Guid>("MoodleStatusId")
                        .HasColumnType("uuid")
                        .HasColumnName("moodle_status_id");

                    b.Property<string>("KeywordWord")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("keyword_word");

                    b.HasKey("MoodleStatusId", "KeywordWord")
                        .HasName("pk_moodle_keywords");

                    b.HasIndex("KeywordWord")
                        .HasDatabaseName("ix_moodle_keywords_keyword_word");

                    b.HasIndex("MoodleStatusId")
                        .HasDatabaseName("ix_moodle_keywords_moodle_status_id");

                    b.ToTable("moodle_keywords", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.MoodleStatus", b =>
                {
                    b.Property<Guid>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("identifier");

                    b.Property<bool>("AsPermanent")
                        .HasColumnType("boolean")
                        .HasColumnName("as_permanent");

                    b.Property<string>("Author")
                        .HasColumnType("text")
                        .HasColumnName("author");

                    b.Property<string>("CustomVFXPath")
                        .HasColumnType("text")
                        .HasColumnName("custom_vfx_path");

                    b.Property<int>("Days")
                        .HasColumnType("integer")
                        .HasColumnName("days");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("Dispelable")
                        .HasColumnType("boolean")
                        .HasColumnName("dispelable");

                    b.Property<int>("Hours")
                        .HasColumnType("integer")
                        .HasColumnName("hours");

                    b.Property<int>("IconID")
                        .HasColumnType("integer")
                        .HasColumnName("icon_id");

                    b.Property<int>("Minutes")
                        .HasColumnType("integer")
                        .HasColumnName("minutes");

                    b.Property<bool>("NoExpire")
                        .HasColumnType("boolean")
                        .HasColumnName("no_expire");

                    b.Property<bool>("Persistent")
                        .HasColumnType("boolean")
                        .HasColumnName("persistent");

                    b.Property<string>("PublisherUID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("publisher_uid");

                    b.Property<int>("Seconds")
                        .HasColumnType("integer")
                        .HasColumnName("seconds");

                    b.Property<bool>("StackOnReapply")
                        .HasColumnType("boolean")
                        .HasColumnName("stack_on_reapply");

                    b.Property<int>("Stacks")
                        .HasColumnType("integer")
                        .HasColumnName("stacks");

                    b.Property<int>("StacksIncOnReapply")
                        .HasColumnType("integer")
                        .HasColumnName("stacks_inc_on_reapply");

                    b.Property<Guid>("StatusOnDispell")
                        .HasColumnType("uuid")
                        .HasColumnName("status_on_dispell");

                    b.Property<DateTime>("TimePublished")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_published");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Identifier")
                        .HasName("pk_moodle_status");

                    b.HasIndex("Author")
                        .HasDatabaseName("ix_moodle_status_author");

                    b.HasIndex("Title")
                        .HasDatabaseName("ix_moodle_status_title");

                    b.ToTable("moodle_status", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.PatternEntry", b =>
                {
                    b.Property<Guid>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("identifier");

                    b.Property<string>("Author")
                        .HasColumnType("text")
                        .HasColumnName("author");

                    b.Property<string>("Base64PatternData")
                        .HasColumnType("text")
                        .HasColumnName("base64pattern_data");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<int>("DownloadCount")
                        .HasColumnType("integer")
                        .HasColumnName("download_count");

                    b.Property<TimeSpan>("Length")
                        .HasColumnType("interval")
                        .HasColumnName("length");

                    b.Property<string>("Name")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("name");

                    b.Property<string>("PublisherUID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("publisher_uid");

                    b.Property<bool>("ShouldLoop")
                        .HasColumnType("boolean")
                        .HasColumnName("should_loop");

                    b.Property<DateTime>("TimePublished")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_published");

                    b.Property<bool>("UsesRotations")
                        .HasColumnType("boolean")
                        .HasColumnName("uses_rotations");

                    b.Property<bool>("UsesVibrations")
                        .HasColumnType("boolean")
                        .HasColumnName("uses_vibrations");

                    b.HasKey("Identifier")
                        .HasName("pk_pattern_entry");

                    b.HasIndex("Author")
                        .HasDatabaseName("ix_pattern_entry_author");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_pattern_entry_name");

                    b.ToTable("pattern_entry", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.PatternKeyword", b =>
                {
                    b.Property<Guid>("PatternEntryId")
                        .HasColumnType("uuid")
                        .HasColumnName("pattern_entry_id");

                    b.Property<string>("KeywordWord")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("keyword_word");

                    b.HasKey("PatternEntryId", "KeywordWord")
                        .HasName("pk_pattern_keywords");

                    b.HasIndex("KeywordWord")
                        .HasDatabaseName("ix_pattern_keywords_keyword_word");

                    b.HasIndex("PatternEntryId")
                        .HasDatabaseName("ix_pattern_keywords_pattern_entry_id");

                    b.ToTable("pattern_keywords", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.PrivateRoom", b =>
                {
                    b.Property<string>("NameID")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name_id");

                    b.Property<string>("HostUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("host_uid");

                    b.Property<DateTime>("TimeMade")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_made");

                    b.HasKey("NameID")
                        .HasName("pk_private_rooms");

                    b.HasIndex("HostUID")
                        .HasDatabaseName("ix_private_rooms_host_uid");

                    b.HasIndex("NameID")
                        .IsUnique()
                        .HasDatabaseName("ix_private_rooms_name_id");

                    b.ToTable("private_rooms", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.PrivateRoomPair", b =>
                {
                    b.Property<string>("PrivateRoomNameID")
                        .HasColumnType("character varying(50)")
                        .HasColumnName("private_room_name_id");

                    b.Property<string>("PrivateRoomUserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("private_room_user_uid");

                    b.Property<bool>("AllowingVibe")
                        .HasColumnType("boolean")
                        .HasColumnName("allowing_vibe");

                    b.Property<string>("ChatAlias")
                        .HasColumnType("text")
                        .HasColumnName("chat_alias");

                    b.Property<bool>("InRoom")
                        .HasColumnType("boolean")
                        .HasColumnName("in_room");

                    b.HasKey("PrivateRoomNameID", "PrivateRoomUserUID")
                        .HasName("pk_private_room_users");

                    b.HasIndex("PrivateRoomNameID")
                        .HasDatabaseName("ix_private_room_users_private_room_name_id");

                    b.HasIndex("PrivateRoomUserUID")
                        .HasDatabaseName("ix_private_room_users_private_room_user_uid");

                    b.ToTable("private_room_users", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.User", b =>
                {
                    b.Property<string>("UID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("uid");

                    b.Property<string>("Alias")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("alias");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("FirstUploadTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("first_upload_timestamp");

                    b.Property<DateTime>("LastLoggedIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_logged_in");

                    b.Property<bool>("ProfileReportingTimedOut")
                        .HasColumnType("boolean")
                        .HasColumnName("profile_reporting_timed_out");

                    b.Property<int>("UploadLimitCounter")
                        .HasColumnType("integer")
                        .HasColumnName("upload_limit_counter");

                    b.Property<int>("VanityTier")
                        .HasColumnType("integer")
                        .HasColumnName("vanity_tier");

                    b.HasKey("UID")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.UserAchievementData", b =>
                {
                    b.Property<string>("UserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<string>("Base64AchievementData")
                        .HasColumnType("text")
                        .HasColumnName("base64achievement_data");

                    b.HasKey("UserUID")
                        .HasName("pk_user_achievement_data");

                    b.HasIndex("UserUID")
                        .HasDatabaseName("ix_user_achievement_data_user_uid");

                    b.ToTable("user_achievement_data", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.UserProfileData", b =>
                {
                    b.Property<string>("UserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<string>("Base64ProfilePic")
                        .HasColumnType("text")
                        .HasColumnName("base64profile_pic");

                    b.Property<int>("BlockedSlotBorder")
                        .HasColumnType("integer")
                        .HasColumnName("blocked_slot_border");

                    b.Property<int>("BlockedSlotOverlay")
                        .HasColumnType("integer")
                        .HasColumnName("blocked_slot_overlay");

                    b.Property<int>("BlockedSlotsBackground")
                        .HasColumnType("integer")
                        .HasColumnName("blocked_slots_background");

                    b.Property<int>("BlockedSlotsBorder")
                        .HasColumnType("integer")
                        .HasColumnName("blocked_slots_border");

                    b.Property<int>("BlockedSlotsOverlay")
                        .HasColumnType("integer")
                        .HasColumnName("blocked_slots_overlay");

                    b.Property<int>("ChosenTitleId")
                        .HasColumnType("integer")
                        .HasColumnName("chosen_title_id");

                    b.Property<int>("CompletedAchievementsTotal")
                        .HasColumnType("integer")
                        .HasColumnName("completed_achievements_total");

                    b.Property<int>("DescriptionBackground")
                        .HasColumnType("integer")
                        .HasColumnName("description_background");

                    b.Property<int>("DescriptionBorder")
                        .HasColumnType("integer")
                        .HasColumnName("description_border");

                    b.Property<int>("DescriptionOverlay")
                        .HasColumnType("integer")
                        .HasColumnName("description_overlay");

                    b.Property<bool>("FlaggedForReport")
                        .HasColumnType("boolean")
                        .HasColumnName("flagged_for_report");

                    b.Property<int>("GagSlotBackground")
                        .HasColumnType("integer")
                        .HasColumnName("gag_slot_background");

                    b.Property<int>("GagSlotBorder")
                        .HasColumnType("integer")
                        .HasColumnName("gag_slot_border");

                    b.Property<int>("GagSlotOverlay")
                        .HasColumnType("integer")
                        .HasColumnName("gag_slot_overlay");

                    b.Property<int>("PadlockBackground")
                        .HasColumnType("integer")
                        .HasColumnName("padlock_background");

                    b.Property<int>("PadlockBorder")
                        .HasColumnType("integer")
                        .HasColumnName("padlock_border");

                    b.Property<int>("PadlockOverlay")
                        .HasColumnType("integer")
                        .HasColumnName("padlock_overlay");

                    b.Property<int>("PlateBackground")
                        .HasColumnType("integer")
                        .HasColumnName("plate_background");

                    b.Property<int>("PlateBorder")
                        .HasColumnType("integer")
                        .HasColumnName("plate_border");

                    b.Property<bool>("ProfileDisabled")
                        .HasColumnType("boolean")
                        .HasColumnName("profile_disabled");

                    b.Property<bool>("ProfileIsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("profile_is_public");

                    b.Property<int>("ProfilePictureBorder")
                        .HasColumnType("integer")
                        .HasColumnName("profile_picture_border");

                    b.Property<int>("ProfilePictureOverlay")
                        .HasColumnType("integer")
                        .HasColumnName("profile_picture_overlay");

                    b.Property<string>("UserDescription")
                        .HasColumnType("text")
                        .HasColumnName("user_description");

                    b.Property<int>("WarningStrikeCount")
                        .HasColumnType("integer")
                        .HasColumnName("warning_strike_count");

                    b.HasKey("UserUID")
                        .HasName("pk_user_profile_data");

                    b.HasIndex("UserUID")
                        .HasDatabaseName("ix_user_profile_data_user_uid");

                    b.ToTable("user_profile_data", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.UserProfileDataReport", b =>
                {
                    b.Property<int>("ReportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("report_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReportID"));

                    b.Property<string>("ReportReason")
                        .HasColumnType("text")
                        .HasColumnName("report_reason");

                    b.Property<DateTime>("ReportTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("report_time");

                    b.Property<string>("ReportedBase64Picture")
                        .HasColumnType("text")
                        .HasColumnName("reported_base64picture");

                    b.Property<string>("ReportedDescription")
                        .HasColumnType("text")
                        .HasColumnName("reported_description");

                    b.Property<string>("ReportedUserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("reported_user_uid");

                    b.Property<string>("ReportingUserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("reporting_user_uid");

                    b.HasKey("ReportID")
                        .HasName("pk_user_profile_data_reports");

                    b.HasIndex("ReportedUserUID")
                        .HasDatabaseName("ix_user_profile_data_reports_reported_user_uid");

                    b.HasIndex("ReportingUserUID")
                        .HasDatabaseName("ix_user_profile_data_reports_reporting_user_uid");

                    b.ToTable("user_profile_data_reports", (string)null);
                });

            modelBuilder.Entity("GagspeakShared.Models.AccountClaimAuth", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .HasConstraintName("fk_account_claim_auth_users_user_uid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.Auth", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "PrimaryUser")
                        .WithMany()
                        .HasForeignKey("PrimaryUserUID")
                        .HasConstraintName("fk_auth_users_primary_user_uid");

                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .HasConstraintName("fk_auth_users_user_uid");

                    b.Navigation("PrimaryUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.ClientPair", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "OtherUser")
                        .WithMany()
                        .HasForeignKey("OtherUserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_pairs_users_other_user_uid");

                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_pairs_users_user_uid");

                    b.Navigation("OtherUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.KinksterRequest", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "OtherUser")
                        .WithMany()
                        .HasForeignKey("OtherUserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_kinkster_pair_requests_users_other_user_uid");

                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_kinkster_pair_requests_users_user_uid");

                    b.Navigation("OtherUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.LikesMoodles", b =>
                {
                    b.HasOne("GagspeakShared.Models.MoodleStatus", "MoodleStatus")
                        .WithMany("LikesMoodles")
                        .HasForeignKey("MoodleStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_likes_moodles_moodles_moodle_status_id");

                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_likes_moodles_users_user_uid");

                    b.Navigation("MoodleStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.LikesPatterns", b =>
                {
                    b.HasOne("GagspeakShared.Models.PatternEntry", "PatternEntry")
                        .WithMany("UserPatternLikes")
                        .HasForeignKey("PatternEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_likes_patterns_patterns_pattern_entry_id");

                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_likes_patterns_users_user_uid");

                    b.Navigation("PatternEntry");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.MoodleKeyword", b =>
                {
                    b.HasOne("GagspeakShared.Models.Keyword", "Keyword")
                        .WithMany("MoodleKeywords")
                        .HasForeignKey("KeywordWord")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_moodle_keywords_keywords_keyword_word");

                    b.HasOne("GagspeakShared.Models.MoodleStatus", "MoodleStatus")
                        .WithMany("MoodleKeywords")
                        .HasForeignKey("MoodleStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_moodle_keywords_moodles_moodle_status_id");

                    b.Navigation("Keyword");

                    b.Navigation("MoodleStatus");
                });

            modelBuilder.Entity("GagspeakShared.Models.PatternKeyword", b =>
                {
                    b.HasOne("GagspeakShared.Models.Keyword", "Keyword")
                        .WithMany("PatternKeywords")
                        .HasForeignKey("KeywordWord")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pattern_keywords_keywords_keyword_word");

                    b.HasOne("GagspeakShared.Models.PatternEntry", "PatternEntry")
                        .WithMany("PatternKeywords")
                        .HasForeignKey("PatternEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pattern_keywords_patterns_pattern_entry_id");

                    b.Navigation("Keyword");

                    b.Navigation("PatternEntry");
                });

            modelBuilder.Entity("GagspeakShared.Models.PrivateRoom", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "Host")
                        .WithMany()
                        .HasForeignKey("HostUID")
                        .HasConstraintName("fk_private_rooms_users_host_uid");

                    b.Navigation("Host");
                });

            modelBuilder.Entity("GagspeakShared.Models.PrivateRoomPair", b =>
                {
                    b.HasOne("GagspeakShared.Models.PrivateRoom", "PrivateRoom")
                        .WithMany()
                        .HasForeignKey("PrivateRoomNameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_private_room_users_private_rooms_private_room_name_id");

                    b.HasOne("GagspeakShared.Models.User", "PrivateRoomUser")
                        .WithMany()
                        .HasForeignKey("PrivateRoomUserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_private_room_users_users_private_room_user_uid");

                    b.Navigation("PrivateRoom");

                    b.Navigation("PrivateRoomUser");
                });

            modelBuilder.Entity("GagspeakShared.Models.UserAchievementData", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_achievement_data_users_user_uid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.UserProfileData", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_profile_data_users_user_uid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GagspeakShared.Models.UserProfileDataReport", b =>
                {
                    b.HasOne("GagspeakShared.Models.User", "ReportedUser")
                        .WithMany()
                        .HasForeignKey("ReportedUserUID")
                        .HasConstraintName("fk_user_profile_data_reports_users_reported_user_uid");

                    b.HasOne("GagspeakShared.Models.User", "ReportingUser")
                        .WithMany()
                        .HasForeignKey("ReportingUserUID")
                        .HasConstraintName("fk_user_profile_data_reports_users_reporting_user_uid");

                    b.Navigation("ReportedUser");

                    b.Navigation("ReportingUser");
                });

            modelBuilder.Entity("GagspeakShared.Models.Keyword", b =>
                {
                    b.Navigation("MoodleKeywords");

                    b.Navigation("PatternKeywords");
                });

            modelBuilder.Entity("GagspeakShared.Models.MoodleStatus", b =>
                {
                    b.Navigation("LikesMoodles");

                    b.Navigation("MoodleKeywords");
                });

            modelBuilder.Entity("GagspeakShared.Models.PatternEntry", b =>
                {
                    b.Navigation("PatternKeywords");

                    b.Navigation("UserPatternLikes");
                });
#pragma warning restore 612, 618
        }
    }
}
